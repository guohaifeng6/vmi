apply plugin: 'com.android.application'

def releaseTime() {
    return "20201106"
}

android {
    ndkVersion "20.1.5948944"
    flavorDimensions "default"
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 4
        versionName releaseTime()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a"
            moduleName "libdrco"
            moduleName "libGLESv2_dec"
            moduleName "libopus"
            moduleName "libOpenglRender"
            moduleName "libzstd"
            moduleName "libcomm"
            moduleName "libemugl_common"
            moduleName "libOpenglCodecCommon"
            moduleName "libGLESv1_dec"
            moduleName "libvncmain"
            moduleName "libGLSnapshot"
            moduleName "libOpenGLESDispatch"
            moduleName "librenderControl"
            moduleName "libhandshake"
        }

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++1z  -fPIC -fno-rtti -Werror -Wreturn-type -Wformat -fexceptions"
                cppFlags "-DBUILD_UNITY_PLUGIN"
                arguments "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
                arguments "-DANDROID_STL=c++_static"
                arguments "-DVMI_BINARY_DIR="+file(".")+"/jniLibs"
            }

            ndk {
                abiFilters 'armeabi-v7a'
            }
        }
    }

    externalNativeBuild {
        cmake {
            version "3.18.1"
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    packagingOptions {
        pickFirst "lib/armeabi-v7a/libVmiLog.so"
        pickFirst "lib/armeabi-v7a/libVmiHWSecure.so"
        pickFirst "lib/armeabi-v7a/libVmiInstrCommon.so"
        pickFirst "lib/armeabi-v7a/libVmiInstructionCommon.so"
        pickFirst "lib/armeabi-v7a/libInstructionEngineClient.so"
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst '/lib/armeabi-v7a/libCommunication.so'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            testCoverageEnabled true
        }
        useLibrary 'org.apache.http.legacy'
    }
    productFlavors {
        app1 {
            manifestPlaceholders = [str: "devStr", package_name: "com.huawei.instructionstream.appui"]
            applicationId "com.huawei.instructionstream.appui"
            resValue "string", "app_name", "云手机"
            resValue "bool", "isrRank", 'true'
            manifestPlaceholders = [provider_name: "com.huawei.instructionstream.appui.fileProvider"]
            buildConfigField "int", "APP_IS_TYPE", "1"
        }
    }
    afterEvaluate {
        def debugFile = file("$buildDir/outputs/apk/app1/debug/app-app1-debug.apk")
        tasks.named("assembleApp1Debug").configure {
            doLast {
                debugFile.renameTo("$buildDir/outputs/apk/app1/debug/cloudphone_client.apk")
            }
        }
    }
    packagingOptions {
        //doNotStrip '**/*.so'
    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        pickFirst "lib/armeabi-v7a/libVmiLog.so"
        pickFirst "lib/armeabi-v7a/libVmiHWSecure.so"
        pickFirst "lib/armeabi-v7a/libVmiInstrCommon.so"
        pickFirst "lib/armeabi-v7a/libVmiInstructionCommon.so"
        pickFirst "lib/armeabi-v7a/libInstructionEngineClient.so"
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst '/lib/armeabi-v7a/libCommunication.so'
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
}


repositories {
    flatDir
            {
                dirs 'libs'
            }
}
dependencies {
    fileTree(dir: 'libs', include: '**/*.aar')
            .each { File file ->
                dependencies.add("compile", [
                        name: file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name },
                        ext : 'aar'
                ])
            }
    // 导入lib下面的所有jar依赖
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:appcompat-v7:26.0.0-alpha1'
    implementation 'com.android.support:support-v4:26.0.0-alpha1'
    implementation 'com.android.support:cardview-v7:26.0.0-alpha1'
    implementation 'com.android.support:recyclerview-v7:26.0.0-alpha1'
    implementation 'androidx.annotation:annotation:+'
}
